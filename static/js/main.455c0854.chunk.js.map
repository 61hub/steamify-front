{"version":3,"sources":["helpers.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["countPriceHour","el","playtimeForever","price","playTimeInHours","Math","round","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputSubmit","event","appid","keyCode","saveData","state","value","setState","target","definePriceHourClassName","priceHour","hideGame","appId","console","log","gameClassName","hidden","axios","patch","concat","data","_this2","react_default","a","createElement","className","index","src","icon","name","colSpan","playtimeForeverReadable","replace","defaultValue","type","onBlur","onKeyUp","onClick","Component","App","serverStatus","parseInt","then","response","catch","clonedGames","toConsumableArray","games","elementToUpdatePrice","find","element","indexElToUpdatePrice","findIndex","updated","objectSpread","handleSortClick","sortedBy","handleSortOrder","sortOrder","gamePriceStatus","get","mappedData","map","isNaN","pricePerHour","filter","_this3","forEach","onChange","_","src_Game","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.455c0854.chunk.js","sourcesContent":["export const countPriceHour = (el) => {\n  let priceHour;\n  if (el.playtimeForever <= 60) {\n    priceHour = el.price;\n    return priceHour\n  } else {\n    let playTimeInHours = el.playtimeForever / 60;\n    priceHour = Math.round(el.price / playTimeInHours);\n    return priceHour\n  }\n};\n\n","import React, {Component} from \"react\"\nimport {countPriceHour} from \"./helpers\"\nimport axios from 'axios'\n\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      hidden: props.data.hidden\n    }\n  }\n\n  handleInputSubmit = (event, appid) => {\n    if(event.keyCode == 13) {\n      this.props.saveData(appid, this.state.value);\n    }\n    else {\n      this.setState({value: event.target.value});\n    }\n  };\n\n  definePriceHourClassName = (el) => {\n    let priceHour = countPriceHour(el);\n    if(priceHour <= 10) {\n      return \"darkGreen\"\n    } else if(priceHour <=50) {\n      return \"green\"\n    } else if(priceHour <= 100) {\n      return \"yellow\"\n    } else if(priceHour <= 200) {\n      return \"orange\"\n    } else if(priceHour >= 200 ) {\n      return \"red\"\n    }\n  };\n\n  hideGame = (appId) => {\n    console.log(appId);\n    this.setState({gameClassName: \"hide\", hidden: true}, () => {\n      axios.patch(`http://steamify-api.61hub.com/v1/games/${appId}`, {hidden: this.state.hidden});\n    });\n\n  };\n  render() {\n    return (\n      <tr className={`gameWrapper ${this.state.hidden ? \"hidden\" : \"\"}`}>\n        <td className=\"gameHourPriceWrapper\">\n          <div className={`gameHourPrice ${this.definePriceHourClassName(this.props.data)}`}></div>\n        </td>\n        <td>{this.props.index + 1}</td>\n        <td>\n          <img src={this.props.data.icon}></img>\n        </td>\n        <td>{this.props.data.name}</td>\n        <td colSpan=\"2\" className=\"gameDuration\">{this.props.data.playtimeForeverReadable.replace(\" days\",\"d\").replace(\" hours\", \"h\").replace(\" minutes\", \"m\")}</td>\n        <td>\n          <input className=\"priceInput\" defaultValue={this.props.data.price} type=\"number\" \n                 onBlur={() => this.props.saveData(this.props.data.appId, this.state.value)}\n                 onKeyUp={(event) => this.handleInputSubmit(event, this.props.data.appId, this.props.data.playtimeForever)}/>\n        </td>\n        <td>\n          <button onClick={() => this.hideGame(this.props.data.appId)}>Hide</button>\n        </td>\n      </tr>\n    )\n  }\n}\nexport default Game","import React, {Component} from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport Game from \"./Game\"\nimport {countPriceHour} from \"./helpers\"\nimport * as _ from \"lodash\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      games: [],\n      serverStatus: \"\",\n      gamePriceStatus: \"\",\n      sortedBy: \"pricePerHour\",\n      sortOrder: \"asc\",\n    };\n  }\n\n  componentDidMount() {\n    axios.get(`http://steamify-api.61hub.com/v1/games`)\n      .then(response => {\n\n        const mappedData = response.data.map((el) => {\n          if (isNaN(parseInt(el.price))) {\n            el.price = 0\n          } else {\n            el.price = parseInt(el.price)\n          }\n          const pricePerHour = countPriceHour(el);\n          el.pricePerHour = pricePerHour\n          return el\n        }).filter((el) => el.hidden == false )\n        this.setState({games: mappedData})\n\n      })\n  }\n\n  saveData = (appid, value) => {\n    this.setState({serverStatus: \"loading\"});\n    axios.patch(`http://steamify-api.61hub.com/v1/games/${appid}`, {price: parseInt(value)})\n      .then(response => this.setState({serverStatus: \"success\"}))\n      .catch(response => this.setState({serverStatus: \"error\"}));\n    const clonedGames = [...this.state.games];\n    const elementToUpdatePrice = clonedGames.find((element) => element.appId == appid);\n    const indexElToUpdatePrice = clonedGames.findIndex((element) => element.appId == appid);\n    const updated = {...elementToUpdatePrice};\n    updated.price = parseInt(value);\n    clonedGames[indexElToUpdatePrice] = updated;\n    this.setState({games: clonedGames});\n  }\n  handleSortClick = (type) => {\n    console.log(type);\n    this.setState({sortedBy: type})\n  };\n  handleSortOrder = (type) => {\n    this.setState({sortOrder: type})\n  }\n  render() {\n    let price = 0;\n    let playtimeForever = 0;\n     this.state.games.forEach((el) => {\n      price = price + el.price;\n      playtimeForever = playtimeForever + el.playtimeForever;\n\n    });\n    return (\n      <div className=\"container\">\n        <div className=\"overlay\">\n          <div className={`loadingState ${this.state.serverStatus}`}></div>\n          <div>\n            Sort by:\n            <div><input type=\"radio\" name=\"sort\" onChange={() => this.handleSortClick(\"price\")}/>Price</div>\n            <div><input type=\"radio\" name=\"sort\" onChange={() => this.handleSortClick(\"playtimeForever\")}/>Hours</div>\n            <div><input type=\"radio\" name=\"sort\" onChange={() => this.handleSortClick(\"pricePerHour\")}/>Price per hour</div>\n            <div><input type=\"radio\" name=\"order\" onChange={() => this.handleSortOrder(\"asc\")}/>Asc</div>\n            <div><input type=\"radio\" name=\"order\" onChange={() => this.handleSortOrder(\"desc\")}/>Desc</div>\n          </div>\n          <div>{`Total price: ${price}`}</div>\n          <div>{`Total playtime: ${Math.round(playtimeForever / 60 / 24)}`}</div>\n          <table>\n            <thead>\n            <tr>\n              <th colSpan='4'>Game's name</th>\n              <th colSpan=\"2\">Game play duration</th>\n              <th colSpan='1'>Price</th>\n            </tr>\n            </thead>\n            <tbody>\n            {_.orderBy(this.state.games, [this.state.sortedBy, \"playtimeForever\"], [this.state.sortOrder])\n              .map((el, index) =>\n                <Game key={el.appId} data={el} index={index} saveData={this.saveData}/>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}