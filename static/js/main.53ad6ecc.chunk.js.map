{"version":3,"sources":["helpers.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["countPriceHour","el","playtimeForever","price","playTimeInHours","Number","toFixed","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputSubmit","event","appid","keyCode","saveData","state","value","setState","target","definePriceHourClassName","priceHour","_this2","react_default","a","createElement","className","concat","data","index","src","icon","name","colSpan","playtimeForeverReadable","replace","defaultValue","type","onBlur","appId","onKeyUp","Component","App","console","log","inputRef","serverStatus","axios","patch","then","response","catch","clonedGames","toConsumableArray","games","elementToUpdatePrice","find","element","indexElToUpdatePrice","findIndex","updated","objectSpread","handleSortClick","sortedBy","gamePriceStatus","get","_this3","onChange","sort","b","isNaN","parseInt","map","src_Game","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53ad6ecc.chunk.js","sourcesContent":["export const countPriceHour = (el) => {\n  let priceHour;\n  if (el.playtimeForever <= 60) {\n    priceHour = el.price;\n    return priceHour\n  } else {\n    let playTimeInHours = el.playtimeForever / 60;\n    priceHour = Number(el.price / playTimeInHours).toFixed(1);\n    return priceHour\n  }\n};\n\n","import React, {Component} from \"react\"\nimport {countPriceHour} from \"./helpers\"\n\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\"\n    }\n  }\n\n  handleInputSubmit = (event, appid) => {\n    if(event.keyCode == 13) {\n      this.props.saveData(appid, this.state.value);\n    }\n    else {\n      this.setState({value: event.target.value});\n    }\n  };\n\n  definePriceHourClassName = (el) => {\n    let priceHour = countPriceHour(el);\n\n    if(priceHour <= 10) {\n      return \"darkGreen\"\n    } else if(priceHour <=50) {\n      return \"green\"\n    } else if(priceHour <= 100) {\n      return \"yellow\"\n    } else if(priceHour <= 200) {\n      return \"orange\"\n    } else if(priceHour >= 200 ) {\n      return \"red\"\n    }\n  };\n\n  render() {\n    return (\n      <tr>\n        <td className=\"gameHourPriceWrapper\">\n          <div className={`gameHourPrice ${this.definePriceHourClassName(this.props.data)}`}></div>\n        </td>\n        <td>{this.props.index + 1}</td>\n        <td>\n          <img src={this.props.data.icon}></img>\n        </td>\n        <td>{this.props.data.name}</td>\n        <td colSpan=\"2\" className=\"gameDuration\">{this.props.data.playtimeForeverReadable.replace(\" days\",\"d\").replace(\" hours\", \"h\").replace(\" minutes\", \"m\")}</td>\n        <td>\n          <input className=\"priceInput\" defaultValue={this.props.data.price} type=\"number\" \n                 onBlur={() => this.props.saveData(this.props.data.appId, this.state.value)}\n                 onKeyUp={(event) => this.handleInputSubmit(event, this.props.data.appId, this.props.data.playtimeForever)}/>\n        </td>\n      </tr>\n    )\n  }\n}\nexport default Game","import React, {Component} from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport Game from \"./Game\"\nimport {countPriceHour} from \"./helpers\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      games: [],\n      serverStatus: \"\",\n      gamePriceStatus: \"\",\n      sortedBy: \"\"\n    };\n  }\n\n  componentDidMount() {\n    axios.get(`http://157.230.56.14:3000/api/v1/games`)\n      .then(response => response.data ? this.setState({games: response.data}) : null);\n  }\n\n\n  saveData = (appid, value) => {\n    console.log(this.inputRef);\n    this.setState({serverStatus: \"loading\"});\n    axios.patch(`http://157.230.56.14:3000/api/v1/games/${appid}`, {price: value})\n      .then(response => this.setState({serverStatus: \"success\"}))\n      .catch(response => this.setState({serverStatus: \"error\"}));\n    const clonedGames = [...this.state.games];\n    const elementToUpdatePrice = clonedGames.find((element) => element.appId == appid);\n    const indexElToUpdatePrice = clonedGames.findIndex((element) => element.appId == appid);\n    const updated = {...elementToUpdatePrice};\n    updated.price = value;\n    clonedGames[indexElToUpdatePrice] = updated;\n    this.setState({games: clonedGames});\n  }\n  handleSortClick = (type) => {\n    console.log(type);\n    this.setState({sortedBy: type})\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"overlay\">\n          <div className={`loadingState ${this.state.serverStatus}`}></div>\n          <div>\n            Sort by:\n            <div><input type=\"radio\" name=\"sort\" onChange={() => this.handleSortClick(\"price\")}/>Price</div>\n            <div><input type=\"radio\" name=\"sort\" onChange={() => this.handleSortClick(\"playtimeForever\")}/>Hours</div>\n            <div><input type=\"radio\" name=\"sort\" onChange={() => this.handleSortClick(\"pricePerHour\")}/>Price per hour\n            </div>\n          </div>\n          <table>\n            <thead>\n            <tr>\n              <th colSpan='3'>Game's name</th>\n              <th colSpan=\"2\">Game play duration</th>\n              <th colSpan='1'>Price</th>\n            </tr>\n            </thead>\n            <tbody>\n            {this.state.games.sort((a, b) => {\n\n              if (this.state.sortedBy == \"playtimeForever\") {\n\n                return b[this.state.sortedBy] - a[this.state.sortedBy]\n              } else if (this.state.sortedBy == \"price\") {\n                if (isNaN(parseInt(b.price))) {\n                  return -1\n                }\n                console.log(b[this.state.sortedBy] - a[this.state.sortedBy]);\n                return b[this.state.sortedBy] - a[this.state.sortedBy]\n              } else {\n                if (isNaN(parseInt(b.price))) {\n                  return -1\n                }\n                return countPriceHour(a) - countPriceHour(b)\n              }\n            })\n              .map((el, index) =>\n                <Game key={el.appId} data={el} index={index} saveData={this.saveData}/>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}