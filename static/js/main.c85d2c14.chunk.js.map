{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","countPriceHour","el","playTimeInHours","playtimeForever","console","log","priceHour","Number","price","toFixed","state","games","value","serverStatus","gamePriceStatus","handleInputSubmit","bind","assertThisInitialized","_this2","axios","get","then","response","data","setState","event","appid","keyCode","saveData","clonedGames","toConsumableArray","elementToUpdatePrice","find","element","appId","indexElToUpdatePrice","findIndex","updated","objectSpread","target","_this3","patch","concat","catch","_this4","react_default","a","createElement","className","colSpan","sort","b","map","index","src","icon","name","playtimeForeverReadable","defaultValue","type","onBlur","onKeyUp","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c85d2c14.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios'\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      games: [],\n      value: \"\",\n      serverStatus: \"\",\n      gamePriceStatus: \"\"\n    };\n    this.handleInputSubmit = this.handleInputSubmit.bind(this);\n}\n\n  componentDidMount() {\n    axios.get(`http://157.230.56.14:3000/api/v1/games`)\n      .then(response =>  response.data ? this.setState({games: response.data}) : null);\n  }\n  handleInputSubmit(event, appid) {\n    if(event.keyCode == 13) {\n      this.saveData(appid);\n    } else {\n      const clonedGames = [...this.state.games];\n      const elementToUpdatePrice = clonedGames.find((element) => element.appId == appid);\n      const indexElToUpdatePrice = clonedGames.findIndex((element) => element.appId == appid);\n      const updated = {...elementToUpdatePrice};\n      updated.price = event.target.value;\n      clonedGames[indexElToUpdatePrice] = updated;\n      this.setState({games: clonedGames});\n      this.setState({value: event.target.value});\n    }\n  }\n  countPriceHour = (el) => {\n    let playTimeInHours = el.playtimeForever /60;\n    console.log(playTimeInHours);\n    let priceHour = Number(el.price /playTimeInHours).toFixed(1);\n    if(priceHour <= 10) {\n       return \"darkGreen\"\n    } else if(priceHour <=50) {\n      return \"green\"\n    } else if(priceHour <= 100) {\n      return \"yellow\"\n    } else if(priceHour <= 200) {\n      return \"orange\"\n    } else if(priceHour >= 200 ) {\n      return \"red\"\n    }\n  };\n  saveData(appid) {\n    this.setState({serverStatus: \"loading\"});\n    axios.patch(`http://157.230.56.14:3000/api/v1/games/${appid}`, {price: this.state.value})\n      .then(response => this.setState({serverStatus: \"success\"}))\n      .catch(response =>  this.setState({serverStatus: \"error\"}));\n  }\n\n  render() {\n    return (\n     <div className=\"container\">\n       <div className=\"overlay\">\n         <div className={`loadingState ${this.state.serverStatus}`}></div>\n        <table>\n          <thead>\n          <tr>\n            <th colSpan='3'>Game's name</th>\n            <th colSpan=\"2\">Game play duration</th>\n            <th colSpan='1'>Price</th>\n          </tr>\n          </thead>\n          <tbody>\n            {this.state.games.sort((a,b) => (b.playtimeForever - a.playtimeForever)).map((el, index) =>\n              <tr>\n                <td className=\"gameHourPriceWrapper\"><div className={`gameHourPrice ${this.countPriceHour(el)}`}></div></td>\n                <td>{index + 1}</td>\n               <td>\n                 <img src={el.icon}></img>\n               </td>\n                <td>{el.name}</td>\n                <td colSpan=\"2\" className=\"gameDuration\">{el.playtimeForeverReadable}</td>\n                 <td>\n                   <input className=\"priceInput\" defaultValue={el.price} type=\"text\" onBlur={() => this.saveData(el.appId)} onKeyUp={(event) => this.handleInputSubmit(event, el.appId, el.playtimeForever)}/>\n                 </td>\n                <td></td>\n              </tr> )}\n          </tbody>\n        </table>\n       </div>\n     </div>\n\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}